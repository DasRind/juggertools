import {
  assertMinActivePlayers,
  collectPlayerIds,
  createEmptyLineup,
  createGameRecord,
  createSceneSnapshot,
  createTurn,
  nowISO,
  Team,
  TeamRef,
} from './core-domain';

describe('core-domain models', () => {
  it('creates a scene snapshot with default orientation and timestamps', () => {
    const left: Team = { id: 'left', name: 'Left', color: '#f00', players: [] };
    const right: Team = { id: 'right', name: 'Right', color: '#0f0', players: [] };
    const snapshot = createSceneSnapshot({
      id: 'scene-1',
      field: { width: 100, height: 50 },
      leftTeam: left,
      rightTeam: right,
    });

    expect(snapshot.scene.orientation).toBe('landscape');
    expect(snapshot.scene.leftTeamId).toBe('left');
    expect(snapshot.scene.rightTeamId).toBe('right');
    expect(snapshot.scene.lastUpdatedAt).toBeTruthy();
  });

  it('creates a turn with autogenerated timestamp', () => {
    const lineup = createEmptyLineup();
    const turn = createTurn({ id: 'turn-1', index: 0, lineup, outcome: 'leftWin' });

    expect(turn.ts).toBeTruthy();
    expect(turn.outcome).toBe('leftWin');
  });

  it('collects all player ids from a lineup', () => {
    const lineup = createEmptyLineup();
    lineup.left.push({ playerId: 'a' });
    lineup.right.push({ playerId: 'b' });

    expect(collectPlayerIds(lineup)).toEqual(['a', 'b']);
  });

  it('guards against insufficient active players', () => {
    const lineup = createEmptyLineup();
    lineup.left.push({ playerId: 'l1' });
    lineup.right.push({ playerId: 'r1' });

    expect(() => assertMinActivePlayers(lineup)).toThrow(/Lineup invalid/);
  });

  it('creates a game record with sensible defaults', () => {
    const left: TeamRef = { id: 'left', name: 'Left' };
    const right: TeamRef = { id: 'right', name: 'Right' };
    const players = [
      { id: 'l1', teamId: 'left', name: 'L1' },
      { id: 'r1', teamId: 'right', name: 'R1' },
    ];

    const record = createGameRecord({ id: 'game-1', left, right, players });
    expect(record.meta.createdAt).toBeTruthy();
    expect(record.meta.version).toBeTruthy();
    expect(record.turns).toEqual([]);
  });

  it('provides monotonic timestamps from nowISO', () => {
    const first = nowISO();
    const second = nowISO();
    expect(first <= second).toBe(true);
  });
});
